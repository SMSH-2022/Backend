const express = require('express');
const app = express();

//postRouter.js ÌååÏùºÏùÑ Î∂àÎü¨Ïò§Í∏∞
const postRouter = require('./routers/postRouter');

//db Í∞ÄÏ†∏Ïò§Í∏∞
require('./db');

const globalRouter = require('./routers/globalRouter');

const PORT = process.env.PORT || 3000;
// .env ÌååÏùº ÎÇ¥Ïùò PORT Í∞íÏùÑ Í∞ÄÏ†∏Ïò§Í≥† ÏóÜÎã§Î©¥ 3000ÏúºÎ°ú ÏÑ§Ï†ï
// ÏúÑ ÏòàÏãúÏùò 3000Î≤à Ìè¨Ìä∏Í∞Ä ÏÇ¨Ïö© Ï§ëÏùº Í≤ΩÏö∞ Îã§Î•∏ Ìè¨Ìä∏ ÏÇ¨Ïö© Í∞ÄÎä•

//path Ï†ëÍ∑º Ïãú Î°úÍ∑∏Î•º ÌôïÏù∏ÌïòÍ∏∞ ÏúÑÌï¥ÏÑú morgan Î™®ÎìàÏùÑ ÏÑ§ÏπòÌïòÏûê
const morgan = require('morgan');

//view Ïó∞Í≤∞Ïãú ÏÇ¨Ïö©
const path = require('path');

//RequestÏùò BodyÎ•º ÏùΩÍ∏∞ ÏúÑÌï¥ express.json ÏÇ¨Ïö©
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

/*
app.get('/', (req, res) => {
  res.send('Welcome my home üòä');
});
*/
// ÏïÑÎûòÏôÄÍ∞ôÏù¥ ÏàòÏ†ï
// `/`Î°ú Ï†ëÍ∑º Ïãú globalRouterÎ•º ÏÇ¨Ïö©ÌïúÎã§
// app.use('/welcome', globalRouter);

app.use('/board', postRouter);
app.use(morgan('dev'));

//view Ïó∞Í≤∞
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// app.listen(PORT, () => {
//   console.log(`‚úÖ Listening on 'http://localhost:${PORT}'`);
// });

//********************************************** */

// const express = require('express');
const session = require('express-session');
const fileStore = require('session-file-store')(session);
const passport = require('passport'),
  GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;
require('dotenv').config();

// const app = express();

//Í∏∞Î≥∏ ÌöåÏõêÏ†ïÎ≥¥ (Ïõπ Ïã§Î¨¥Ïãú Îç∞Ïù¥ÌÑ∞ Î≤†Ïù¥Ïä§Î°ú ÎåÄÏ≤¥ ÌïòÎ©¥Îê®)
let db = [
  {
    id: '1',
    email: 'goodmemory@tistory.com',
    password: 'goodmemory',
    name: 'goodmemory',
    provider: '',
    token: '',
    providerId: '',
  },
];

//Íµ¨Í∏Ä api ID, Secret Ï†ïÎ≥¥ Ï†ÄÏû• (Íµ¨Í∏Ä Í∞úÎ∞úÏûê Ïõπ ÎÇ¥ Ïï±ID, ÏãúÌÅ¨Î¶ø ÏûÖÎ†•)
const googleCredentials = {
  web: {
    client_id: process.env.CLIENT_ID,
    client_secret: process.env.CLIENT_SECRET,
    redirect_uris: [
      'ttps://gennies-server-deploy.herokuapp.com/auth/google/callback',
    ],
    //https://gennies-server-deploy.herokuapp.com/
  },
};

//MIDDLEWARE
app.use(express.urlencoded({ extended: false }));
app.use(
  session({
    secret: 'keyboard cat',
    resave: false,
    saveUninitialized: false,
    store: new fileStore(),
  })
);

//PASSPORT - Ï†ÑÏö© middleware Ï∂îÍ∞Ä
app.use(passport.initialize());
app.use(passport.session());

//PASSPORT - ÏßÅÎ†¨Ìôî
//serializeUser : Î°úÍ∑∏Ïù∏ / ÌöåÏõêÍ∞ÄÏûÖ ÌõÑ 1Ìöå Ïã§Ìñâ
//deserializeUser : ÌéòÏù¥ÏßÄ Ï†ÑÌôòÏãú ÎßàÎã§ Ïã§Ìñâ
passport.serializeUser(function (user, done) {
  done(null, user);
});
passport.deserializeUser(function (user, done) {
  done(null, user);
});

//PASSPORT (Google) - Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏Ïãú Ï†ïÎ≥¥ GET
passport.use(
  new GoogleStrategy(
    {
      clientID: googleCredentials.web.client_id,
      clientSecret: googleCredentials.web.client_secret,
      callbackURL: googleCredentials.web.redirect_uris[0],
    },
    function (accessToken, refreshToken, profile, done) {
      console.log(profile);
      let user = db.find(
        (userInfo) => userInfo.email === profile.emails[0].value
      );
      if (user) {
        user.provider = profile.provider;
        user.providerId = profile.id;
        user.token = accessToken;
        user.name = profile.displayName;
      } else {
        user = {
          id: 2, //ÎûúÎç§Í∞í ÌïÑÏöîÏãú, npm shortid ÏÑ§Ïπò ÌõÑ shortid.generate() ÌôúÏö©
          provider: profile.provider,
          providerId: profile.id,
          token: accessToken,
          name: profile.displayName,
          email: profile.emails[0].value,
        };
        db.push(user);
      }
      return done(null, user);
    }
  )
);

//Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Î≤ÑÌäº ÌÅ¥Î¶≠Ïãú Íµ¨Í∏Ä ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌïòÎäî Ïó≠Ìï†
app.get(
  '/auth/google',
  passport.authenticate('google', { scope: ['email', 'profile'] })
);

//Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ ÌõÑ ÏûêÏã†Ïùò ÏõπÏÇ¨Ïù¥Ìä∏Î°ú ÎèåÏïÑÏò§Í≤åÎê† Ï£ºÏÜå (ÏΩúÎ∞± url)
app.get(
  '/auth/google/callback',
  passport.authenticate('google', { failureRedirect: '/auth/login' }),
  function (req, res) {
    res.redirect('/');
  }
);

//ÌôàÌéòÏù¥ÏßÄ ÏÉùÏÑ± (req.userÎäî passportÏùò serializeÎ•º ÌÜµÌï¥ user Ï†ïÎ≥¥ Ï†ÄÏû•ÎêòÏñ¥ÏûàÏùå)
app.get('/', (req, res) => {
  console.log(db, '#############');
  const temp = getPage('Welcome', 'Welcome to visit...', getBtn(req.user));
  res.send(temp);
});

//Î°úÍ∑∏ÏïÑÏõÉ ÌéòÏù¥ÏßÄ : Î°úÍ∑∏ ÏïÑÏõÉ Ï≤òÎ¶¨ + ÏÑ∏ÏÖò ÏÇ≠Ï†ú + Ïø†ÌÇ§ ÏÇ≠Ï†ú ÌõÑ ÌôàÏúºÎ°ú Î¶¨Îã§Ïù¥Î†âÏÖò
//passport Ìå®ÌÇ§ÏßÄÎ°ú Ïù∏Ìï¥ req.logout()ÏúºÎ°ú Î°úÍ∑∏ÏïÑÏõÉ Í∏∞Îä• Íµ¨ÌòÑ Í∞ÄÎä•
app.get('/auth/logout', (req, res, next) => {
  req.session.destroy((err) => {
    if (err) next(err);
    req.logOut();
    res.cookie(`connect.sid`, ``, { maxAge: 0 });
    res.redirect('/');
  });
});

//ÏóêÎü¨Ï≤òÎ¶¨
app.use((err, req, res, next) => {
  if (err) console.log(err);
  res.send(err);
});

//Î°úÍ∑∏Ïù∏ or Î°úÍ∑∏ÏïÑÏõÉ ÏÉÅÌÉúÏóê Îî∞Î•∏ Î≤ÑÌäº ÏÉùÏÑ±
const getBtn = (user) => {
  // console.log('Ìïò„Öè„Öè' + user.name);
  return user !== undefined
    ? `${user.name} | <a href="/auth/logout">logout</a>`
    : `<a href="/auth/google">Google Login</a>`;
};

//ÌéòÏù¥ÏßÄ ÏÉùÏÑ± Ìï®Ïàò
const getPage = (title, description, auth) => {
  return `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>${title}</title>
        </head>
        <body>
            ${auth}
            <h1>${title}</h1>
            <p>${description}</p>
        </body>
        </html>
        `;
};

exports.db = db;

//SERVER
// app.listen(3000, () => console.log('http://localhost:3000'));
app.listen(PORT, () => {
  console.log(`‚úÖ Listening on 'http://localhost:${PORT}'`);
});
